"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const task_names_1 = require("@nomiclabs/buidler/builtin-tasks/task-names");
const config_1 = require("@nomiclabs/buidler/config");
const plugins_1 = require("@nomiclabs/buidler/plugins");
plugins_1.ensurePluginLoadedWithUsePlugin();
/**
 * Method passed to eth-gas-reporter to resolve artifact resources. Loads
 * and processes JSON artifacts
 * @param  {string} artifactPath `config.paths.artifacts`
 * @param  {string} contractName parsed contract name
 * @return {any}                 object w/ abi and bytecode
 */
function artifactor(artifactPath, contractName) {
    let _artifact = {};
    let file = `${artifactPath}/${contractName}.json`;
    try {
        _artifact = JSON.parse(fs_1.readFileSync(file, "utf-8"));
    }
    catch (err) {
        throw err;
    }
    return {
        abi: _artifact.abi,
        bytecode: _artifact.bytecode,
        deployedBytecode: _artifact.deployedBytecode
    };
}
/**
 * Sets reporter options to pass to eth-gas-reporter:
 * > url to connect to client with
 * > artifact format (buidler)
 * > solc compiler info
 * @param  {ResolvedBuidlerConfig} config [description]
 * @param  {BuidlerArguments}      args   [description]
 * @return {EthGasReporterConfig}         [description]
 */
function getDefaultOptions(config, networkConfig) {
    const defaultUrl = "http://localhost:8545";
    let url;
    let artifactType;
    // Resolve URL
    if (networkConfig.url) {
        url = networkConfig.url;
    }
    else {
        url = defaultUrl;
    }
    return {
        artifactType: artifactor.bind(null, config.paths.artifacts),
        enabled: true,
        url: url,
        metadata: {
            compiler: {
                version: config.solc.version
            },
            settings: {
                optimizer: {
                    enabled: config.solc.optimizer.enabled,
                    runs: config.solc.optimizer.runs
                }
            }
        }
    };
}
/**
 * Merges GasReporter defaults with user's GasReporter config
 * @param  {ResolvedBuidlerConfig} config
 * @param  {BuidlerArguments}      args   command line args (e.g network)
 * @return {any}
 */
function getOptions(config, networkConfig) {
    return Object.assign(Object.assign({}, getDefaultOptions(config, networkConfig)), config.gasReporter);
}
/**
 * Overrides TASK_TEST_RUN_MOCHA_TEST to (conditionally) use eth-gas-reporter as
 * the mocha test reporter and passes mocha relevant options. These are listed
 * on the `gasReporter` of the user's config.
 */
function default_1() {
    config_1.internalTask(task_names_1.TASK_TEST_RUN_MOCHA_TESTS).setAction(async (args, { config, network }, runSuper) => {
        const options = getOptions(config, network.config);
        if (options.enabled) {
            const mochaConfig = config.mocha || {};
            mochaConfig.reporter = "eth-gas-reporter";
            mochaConfig.reporterOptions = options;
            config.mocha = mochaConfig;
        }
        await runSuper();
    });
}
exports.default = default_1;
//# sourceMappingURL=index.js.map