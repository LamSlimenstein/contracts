"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServerConfigParams_1 = require("../../src/relayserver/ServerConfigParams");
const fs = __importStar(require("fs"));
const test_helpers_1 = require("@openzeppelin/test-helpers");
const VersionRegistry_1 = require("../../src/common/VersionRegistry");
require('source-map-support').install({ errorFormatterForce: true });
const VersionRegistryContract = artifacts.require('VersionRegistry');
function expectThrow(func, match) {
    try {
        func();
    }
    catch (e) {
        assert.include(e.toString(), match);
        return;
    }
    assert.fail('expected to fail with: ' + match);
}
function addr(n) {
    return '0x'.padEnd(42, n.toString());
}
context('#ServerConfigParams', () => {
    context('utils', () => {
        it('#filterType', () => {
            assert.deepEqual(ServerConfigParams_1.filterType({ a: 'number', b: 'string', c: 'number' }, 'number'), ['a', 'c']);
        });
        it('#entriesToObj', () => {
            const a = { x: 1, y: 2, z: { a: 11, b: 22 } };
            assert.deepEqual(a, ServerConfigParams_1.entriesToObj(Object.entries(a)));
        });
        it('#filterMembers', () => {
            const a = { x: 1, y: 2, z: 3 };
            const config = { x: 'number', y: 'string' };
            assert.deepEqual(ServerConfigParams_1.filterMembers(a, config), { x: 1, y: 2 });
        });
    });
    context('#parseServerConfig', () => {
        const tmpConfigfile = '/tmp/test.configfile.tmp';
        after(() => {
            if (fs.existsSync(tmpConfigfile)) {
                fs.unlinkSync(tmpConfigfile);
            }
        });
        it('should parse command line params', function () {
            assert.deepEqual(ServerConfigParams_1.parseServerConfig(['--devMode=true', '--relayHubAddress=123'], {}), { devMode: true, relayHubAddress: '123' });
        });
        it('cmdline should override env, which should override file', async () => {
            fs.writeFileSync(tmpConfigfile, JSON.stringify({ url: 'fileparam' }));
            const env = { url: 'envparam' };
            // just file
            assert.deepInclude(ServerConfigParams_1.parseServerConfig(['--config', tmpConfigfile], {}), { url: 'fileparam' });
            // file+env
            assert.deepInclude(ServerConfigParams_1.parseServerConfig(['--config', tmpConfigfile], env), { url: 'envparam' });
            // file+env+cmdline
            assert.deepInclude(ServerConfigParams_1.parseServerConfig(['--config', tmpConfigfile, '--url', 'cmdparam'], env), { url: 'cmdparam' });
        });
        it('should use env as defaults', function () {
            assert.deepEqual(ServerConfigParams_1.parseServerConfig(['--devMode=true', '--relayHubAddress=123'], {
                relayHubAddress: 'hubFromEnv',
                url: 'urlFromEnv'
            }), { devMode: true, relayHubAddress: '123', url: 'urlFromEnv' });
        });
        it('should throw on unknown cmdline param', function () {
            expectThrow(() => ServerConfigParams_1.parseServerConfig(['--asdasd'], {}), 'unexpected param asdasd');
        });
        it('should throw on invalid type of cmdline param', function () {
            expectThrow(() => ServerConfigParams_1.parseServerConfig(['--debug=asd'], {}), 'Invalid boolean: debug');
        });
        it('should throw on missing config file', function () {
            expectThrow(() => ServerConfigParams_1.parseServerConfig(['--config=nosuchfile'], {}), 'unable to read config file');
        });
        it('should abort on invalid config file', function () {
            fs.writeFileSync(tmpConfigfile, 'asdasd');
            expectThrow(() => ServerConfigParams_1.parseServerConfig(['--config', tmpConfigfile], {}), 'SyntaxError');
        });
        it('should abort on unknown param in config file', function () {
            fs.writeFileSync(tmpConfigfile, '{"asd":123}');
            expectThrow(() => ServerConfigParams_1.parseServerConfig(['--config', tmpConfigfile], {}), 'unexpected param asd');
        });
        it('should read param from file if no commandline or env', function () {
            fs.writeFileSync(tmpConfigfile, '{"pctRelayFee":123, "baseRelayFee":234, "port":345}');
            assert.deepEqual(ServerConfigParams_1.parseServerConfig(['--config', tmpConfigfile, '--port', '111'], { baseRelayFee: 222 }), { baseRelayFee: 222, config: tmpConfigfile, pctRelayFee: 123, port: 111 });
        });
    });
    context('#resolveServerConfig', () => {
        const provider = web3.currentProvider;
        it('should fail on missing hub/oracle', async () => {
            await test_helpers_1.expectRevert(ServerConfigParams_1.resolveServerConfig({}, provider), 'missing param: must have either relayHubAddress or versionRegistryAddress');
        });
        it('should fail on invalid relayhub address', async () => {
            const config = { relayHubAddress: '123' };
            await test_helpers_1.expectRevert(ServerConfigParams_1.resolveServerConfig(config, provider), 'invalid param: "relayHubAddress" is not a valid address: 123');
        });
        it('should fail on no-contract relayhub address', async () => {
            const config = { relayHubAddress: addr(1) };
            await test_helpers_1.expectRevert(ServerConfigParams_1.resolveServerConfig(config, provider), 'RelayHub: no contract at address 0x1111111111111111111111111111111111111111');
        });
        it('should fail on missing hubid for VersionRegistry', async () => {
            const config = { versionRegistryAddress: addr(1) };
            await test_helpers_1.expectRevert(ServerConfigParams_1.resolveServerConfig(config, provider), 'missing param: relayHubId to read from VersionRegistry');
        });
        it('should fail on no-contract VersionRegistry address', async () => {
            const config = { versionRegistryAddress: addr(1), relayHubId: 'hubid' };
            await test_helpers_1.expectRevert(ServerConfigParams_1.resolveServerConfig(config, provider), 'Invalid param versionRegistryAddress: no contract at address 0x1111111111111111111111111111111111111111');
        });
        contract('with VersionRegistry', () => {
            let oracle;
            before(async () => {
                oracle = await VersionRegistryContract.new();
                await oracle.addVersion(VersionRegistry_1.string32('hub-invalidaddr'), VersionRegistry_1.string32('1.0'), 'garbagevalue');
                await oracle.addVersion(VersionRegistry_1.string32('hub-nocontract'), VersionRegistry_1.string32('1.0'), addr(2));
                await oracle.addVersion(VersionRegistry_1.string32('hub-wrongcontract'), VersionRegistry_1.string32('1.0'), oracle.address);
            });
            it('should fail on invalid hub address in oracle', async () => {
                const config = { versionRegistryAddress: oracle.address, relayHubId: 'hub-invalidaddr' };
                await test_helpers_1.expectRevert(ServerConfigParams_1.resolveServerConfig(config, provider), 'Invalid param relayHubId hub-invalidaddr @ 1.0: not an address: garbagevalue');
            });
            it('should fail on no contract at hub address in oracle', async () => {
                const config = { versionRegistryAddress: oracle.address, relayHubId: 'hub-nocontract' };
                await test_helpers_1.expectRevert(ServerConfigParams_1.resolveServerConfig(config, provider), 'RelayHub: no contract at address 0x2222222222222222222222222222222222222222');
            });
        });
    });
});
//# sourceMappingURL=ServerConfigParams.test.js.map