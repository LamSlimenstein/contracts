/// <reference types="bn.js" />
/// <reference types="@openeth/truffle-typings" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { PrefixedHexString, TransactionOptions } from 'ethereumjs-tx';
import { StoredTx, TxStoreManager } from './TxStoreManager';
import { Mutex } from 'async-mutex';
import { KeyManager } from './KeyManager';
import ContractInteractor from '../relayclient/ContractInteractor';
import PingResponse from '../common/PingResponse';
import { Address, IntString } from '../relayclient/types/Aliases';
import TmpRelayTransactionJsonRequest from '../relayclient/types/TmpRelayTransactionJsonRequest';
import { BlockHeader } from 'web3-eth';
import { Log, TransactionReceipt } from 'web3-core';
interface DecodeLogsEvent {
    name: string;
    args: any;
}
export interface SignedTransactionDetails {
    receipt: TransactionReceipt;
    signedTx: PrefixedHexString;
}
export declare type CreateTransactionDetails = TmpRelayTransactionJsonRequest;
export interface SendTransactionDetails {
    signer: Address;
    method?: any;
    destination: Address;
    value?: IntString;
    gasLimit?: IntString;
    gasPrice?: IntString;
}
export interface RelayServerParams {
    readonly txStoreManager: TxStoreManager;
    readonly workersKeyManager: KeyManager;
    readonly managerKeyManager: KeyManager;
    readonly contractInteractor: ContractInteractor;
    readonly hubAddress: Address;
    readonly trustedPaymasters?: Address[];
    readonly baseRelayFee: number | undefined;
    readonly pctRelayFee: number | undefined;
    readonly gasPriceFactor: number;
    readonly registrationBlockRate?: number;
    readonly maxAcceptanceBudget: number | undefined;
    readonly url?: string;
    readonly workerMinBalance: number | undefined;
    readonly workerTargetBalance: number | undefined;
    readonly managerMinBalance: number | undefined;
    readonly managerTargetBalance: number | undefined;
    readonly minHubWithdrawalBalance: number | undefined;
    readonly alertedBlockDelay: number | undefined;
    readonly devMode: boolean;
    readonly debug: boolean;
}
export declare class RelayServer extends EventEmitter {
    lastScannedBlock: number;
    ready: boolean;
    alerted: boolean;
    alertedBlock: number;
    nonceMutex: Mutex;
    minAlertedDelayMS: number;
    maxAlertedDelayMS: number;
    readonly nonces: Record<Address, number>;
    readonly maxAcceptanceBudget: number;
    private readonly managerAddress;
    gasPrice: number;
    private relayHubContract;
    private paymasterContract;
    chainId: number;
    rawTxOptions: TransactionOptions | undefined;
    private _workerSemaphoreOn;
    private stakeManagerContract;
    private smTopics;
    private rhTopics;
    networkId: number | undefined;
    private initialized;
    stake: import("bn.js");
    lastError: string | undefined;
    owner: Address | undefined;
    unstakeDelay: BN | undefined;
    withdrawBlock: BN | undefined;
    authorizedHub: boolean;
    readonly txStoreManager: TxStoreManager;
    readonly managerKeyManager: KeyManager;
    readonly workersKeyManager: KeyManager;
    private readonly contractInteractor;
    private readonly versionManager;
    readonly hubAddress: Address;
    readonly trustedPaymasters: Address[];
    readonly baseRelayFee: number;
    readonly pctRelayFee: number;
    readonly gasPriceFactor: number;
    readonly registrationBlockRate?: number;
    readonly url: string;
    readonly workerMinBalance: number;
    readonly workerTargetBalance: number;
    readonly managerMinBalance: number;
    readonly managerTargetBalance: number;
    readonly minHubWithdrawalBalance: number;
    readonly alertedBlockDelay: number;
    private readonly devMode;
    private workerTask;
    constructor(params: RelayServerParams);
    getManagerAddress(): PrefixedHexString;
    getWorkerAddress(index: number): PrefixedHexString;
    getMinGasPrice(): number;
    isReady(): boolean;
    pingHandler(): PingResponse;
    createRelayTransaction(req: CreateTransactionDetails): Promise<PrefixedHexString | undefined>;
    start(): void;
    stop(): void;
    _workerSemaphore(blockHeader: BlockHeader): void;
    fatal(message: string): void;
    _init(): Promise<void>;
    replenishServer(workerIndex: number): Promise<TransactionReceipt[]>;
    _worker(blockHeader: BlockHeader): Promise<TransactionReceipt[]>;
    getManagerBalance(): Promise<BN>;
    getWorkerBalance(workerIndex: number): Promise<BN>;
    refreshStake(): Promise<BN>;
    _getContractLogs(address: string | undefined, topics: string[][] | undefined): Promise<Log[]>;
    _handlePastEvents(blockHeader: BlockHeader): Promise<TransactionReceipt[]>;
    _handleHubAuthorizedEvent(dlog: DecodeLogsEvent): Promise<TransactionReceipt[]>;
    _handleHubUnauthorizedEvent(dlog: DecodeLogsEvent): Promise<TransactionReceipt[]>;
    _handleStakedEvent(dlog: DecodeLogsEvent): Promise<TransactionReceipt[]>;
    _registerIfNeeded(): Promise<TransactionReceipt[]>;
    _getRegistrationBlock(): Promise<number>;
    _getLatestTxBlockNumber(): Promise<number>;
    _areWorkersAdded(): Promise<boolean>;
    _handleUnstakedEvent(dlog: DecodeLogsEvent): Promise<TransactionReceipt[]>;
    _handleTransactionRejectedByPaymasterEvent(dlog: DecodeLogsEvent, blockNumber: number): Promise<void>;
    _sendMangerEthBalanceToOwner(gasPrice: string): Promise<TransactionReceipt[]>;
    _sendWorkersEthBalancesToOwner(gasPrice: string): Promise<TransactionReceipt[]>;
    _sendManagerHubBalanceToOwner(gasPrice: string): Promise<TransactionReceipt[]>;
    /**
     * resend Txs of all signers (manager, workers)
     * @return the receipt from the first request
     */
    _resendUnconfirmedTransactions(blockHeader: BlockHeader): Promise<PrefixedHexString | undefined>;
    _resendUnconfirmedTransactionsForManager(blockHeader: BlockHeader): Promise<PrefixedHexString | null>;
    _resendUnconfirmedTransactionsForWorker(blockHeader: BlockHeader, workerIndex: number): Promise<PrefixedHexString | null>;
    _resendUnconfirmedTransactionsForSigner(blockHeader: BlockHeader, signer: string): Promise<PrefixedHexString | null>;
    _sendTransaction({ signer, method, destination, value, gasLimit, gasPrice }: SendTransactionDetails): Promise<SignedTransactionDetails>;
    _resendTransaction(tx: StoredTx): Promise<SignedTransactionDetails>;
    _pollNonce(signer: Address): Promise<number>;
    _parseEvent(event: {
        events: any[];
        name: string;
        address: string;
    } | null): any;
    timeUnit(): number;
}
export {};
