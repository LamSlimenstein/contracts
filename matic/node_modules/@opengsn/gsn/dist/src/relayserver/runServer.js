"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: convert to 'commander' format
const fs_1 = __importDefault(require("fs"));
const web3_1 = __importDefault(require("web3"));
const HttpServer_1 = require("./HttpServer");
const RelayServer_1 = require("./RelayServer");
const KeyManager_1 = require("./KeyManager");
const TxStoreManager_1 = require("./TxStoreManager");
const ContractInteractor_1 = __importDefault(require("../relayclient/ContractInteractor"));
const GSNConfigurator_1 = require("../relayclient/GSNConfigurator");
const ServerConfigParams_1 = require("./ServerConfigParams");
/*
added:
  alertedBlockDelay?: number
*/
function error(err) {
    console.error(err);
    process.exit(1);
}
async function run() {
    let config;
    let web3provider;
    try {
        const conf = await ServerConfigParams_1.parseServerConfig(process.argv.slice(2), process.env);
        if (conf.ethereumNodeUrl == null) {
            error('missing ethereumNodeUrl');
        }
        web3provider = new web3_1.default.providers.HttpProvider(conf.ethereumNodeUrl);
        config = await ServerConfigParams_1.resolveServerConfig(conf, web3provider);
    }
    catch (e) {
        error(e.message);
    }
    const { devMode, workdir } = config;
    if (devMode) {
        if (fs_1.default.existsSync(`${workdir}/${TxStoreManager_1.TXSTORE_FILENAME}`)) {
            fs_1.default.unlinkSync(`${workdir}/${TxStoreManager_1.TXSTORE_FILENAME}`);
        }
    }
    const managerKeyManager = new KeyManager_1.KeyManager(1, workdir + '/manager');
    const workersKeyManager = new KeyManager_1.KeyManager(1, workdir + '/workers');
    const txStoreManager = new TxStoreManager_1.TxStoreManager({ workdir });
    const gasPriceFactor = (config.gasPricePercent + 100) / 100;
    const { relayHubAddress, baseRelayFee, pctRelayFee, port, url } = config;
    const contractInteractor = new ContractInteractor_1.default(web3provider, GSNConfigurator_1.configureGSN({ relayHubAddress: config.relayHubAddress }));
    const params = Object.assign({ contractInteractor,
        txStoreManager,
        managerKeyManager,
        workersKeyManager, hubAddress: relayHubAddress, gasPriceFactor }, config);
    const relay = new RelayServer_1.RelayServer(params);
    console.log('Starting server.');
    console.log('Using server config:', config);
    console.log(`server params:\nhub address: ${relayHubAddress} url: ${url} baseRelayFee: ${baseRelayFee} pctRelayFee: ${pctRelayFee} `);
    const httpServer = new HttpServer_1.HttpServer(port, relay);
    httpServer.start();
}
// eslint-disable-next-line @typescript-eslint/no-floating-promises
run();
//# sourceMappingURL=runServer.js.map